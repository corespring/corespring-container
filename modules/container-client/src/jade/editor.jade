extends layout

block content

  | <!-- 
  |  !{versionInfo}
  | -->


  include templates/question
  include templates/profile
  include templates/supporting-materials
  include templates/metadata

  .root(ng-controller="Root", dimension-propagator='')
    .container-fluid
      include partials/nav
    .main-content(ui-view="main")


//After the angular module has been created.
block after-main-script

  script(type="text/javascript").

    (function(){

      function mkEditorState(name){
        return {
          url: '/' + name,
          views: {
            main: {
              templateUrl: '/templates/' + name
            }
          }
        }
      }

      var appLoadConfig = {
        defaultPath: '/question',
        states: {
          question : mkEditorState('question'),
          profile : mkEditorState('profile'),
          'supporting-materials' : mkEditorState('supporting-materials'),
          metadata : {
            url: '/metadata',
            params: {
              key: 'key'
            },
            views: {
              main: {
                templateUrl: '/templates/metadata'
              }
            }
          }
        }
      };

      function uiRouterConfig($provide, $stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise(appLoadConfig.defaultPath);
        for( var x in appLoadConfig.states){
          $stateProvider.state(x, appLoadConfig.states[x]);
        }
      }

      function ModalOpenDispatcher(){
        var listener = null;

        this.setListener = function(value){
          listener = value;
        };

        this.propagate = function(jqueryModal){
          try {
            listener(jqueryModal);
          } catch (e) {
            console.warn("[ModalOpenDispatcher] Error executing listener", listener, e);
          }
        };
      }

      function modalConfig($provide){
        var modalOpenDispatcher = new ModalOpenDispatcher();
        $provide.value('ModalOpenDispatcher', modalOpenDispatcher);

        $provide.decorator('$modal', function ($modalDelegate){
          return {open: newOpen};

          function newOpen(b){
            var maxAttemptsToFindModal = 10;
            var modalMarker = "modal-" + new Date().getTime();
            b.windowClass = b.windowClass + " " + modalMarker;
            setTimeout(findModalByMarker, 100);
            return $modalDelegate.open(b);

            function findModalByMarker(){
              var $modal = $('.' + modalMarker);
              if($modal.length > 0) {
                modalOpenDispatcher.propagate($modal);
              } else {
                if(--maxAttemptsToFindModal > 0) {
                  setTimeout(findModalByMarker, 100);
                }
              }
            }
          }
        });
      }

      var editorOptions = !{options};
      angular.module('corespring-#{appName}').constant('STATIC_PATHS', editorOptions.staticPaths);
      angular.module('corespring-#{appName}').constant('DEBOUNCE_IN_MILLIS', editorOptions.debounceInMillis || 5000 );
      angular.module('corespring-#{appName}').config(uiRouterConfig);
      angular.module('corespring-#{appName}').config(modalConfig);
      angular.module('corespring-#{appName}')

        .config(['$tooltipProvider', function($tooltipProvider) {
          //add ng-ui-tooltip-close as an event to close the tooltip
          //this enables you to hide the tooltip by calling elem.trigger('ng-ui-tooltip-close');
          $tooltipProvider.setTriggers({
            mouseenter: 'mouseleave ng-ui-tooltip-close',
            click: 'click ng-ui-tooltip-close',
            focus: 'blur ng-ui-tooltip-close'
          });
        }])
        .config([
          'wiggiWizConfigProvider',
          function(wiggiWizConfigProvider){
            //Set up the current 'ComponentImageService' - this will be removed soon.
            wiggiWizConfigProvider.add({
              imageService: 'ComponentImageService'
            });
          }
        ]);
    })(this);