doctype html 
html(xmlns="http://www.w3.org/1999/html")
  head
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    title= title

    // --- Version ---
    
    | <!-- 
    |  !{versionInfo} 
    | -->
    
    block header-scripts

    for c in css
      link(rel='stylesheet',href='#{c}')

    block extra-css
      
  body(ng-app="corespring-#{appName}", class="corespring-#{appName}-body")
    .pre-loader
      #spinner

  .main.hide-body
    block content

    for j in js
      script(type='text/javascript', src='#{j}')

    block before-main-script

    script(type="text/javascript").

      var spinnerOpts = {
        length: 17, // The length of each line
        width: 8, // The line thickness
        radius: 20, // The radius of the inner circle
        color: '#556270', // #rgb or #rrggbb or array of colors
        shadow: false, // Whether to render a shadow
        hwaccel: true // Whether to use hardware acceleration
      };

      var target = document.getElementById('spinner');
      var spinner = new Spinner(spinnerOpts).spin(target);

      $(document).ready(function () {
        setTimeout(function() {
          spinner.stop();
          $('.pre-loader').remove();
          $('.main').addClass('blend');
        }, 100);
      });
      
      var allNgModules = ['corespring-templates']
        .concat([#{ngModules}])
        .concat([#{componentNgModules}]);

      function getParams(){
        var nameValueStrings = document.location.search.replace('?', '').split('&');

        function toNameValue(acc, s){
          var arr = s.split('=');
          acc[arr[0]] = arr[1];
          return acc;
        }
        
        return _.reduce(nameValueStrings, toNameValue, {});
      }

      var loggers = {
        empty: function($delegate) {
          var out = {
            log: function(){},
            debug: function(){},
            info: function(){}
          }
          out.error = $delegate.error;
          out.warn = $delegate.warn;
          return out;
        },
        passThrough: function($delegate) { return $delegate; },
        filtering: function(category){
          return function($delegate) {

            function filter(fnName){
              return function(){
                var args = Array.prototype.slice.call(arguments);
                var firstArg = args[0];
                if( new RegExp('.*' + category + '.*').test(firstArg)){
                  $delegate[fnName].apply(null, args);
                }
              }
            }

            var out = {
              log: filter('log'),
              debug: filter('debug'),
              info: filter('info')
            }

            out.error = $delegate.error;
            out.warn = $delegate.warn;
            return out;
          }
        }

      }
      
      angular.module( 'corespring-#{appName}', allNgModules ).config(['$provide', function($provide) {

          var params = getParams();
          
          var logFn = (function(){
            if(params.logCategory){
              return loggers.filtering(params.logCategory);
            } else if(params.loggingEnabled === 'true'){
              return loggers.passThrough;
            } else {
              return loggers.empty;
            }
          })();

          $provide.decorator('LogFactory', function($delegate){
            return {
              getLogger: function(n){
                if(params.logCategory){
                  var matches = new RegExp('.*' + params.logCategory + '.*').test(n);
                  if(matches){
                    return $delegate.getLogger(n);
                  } else {
                    return loggers.empty($delegate.getLogger(n));
                  }
                } else if(params.loggingEnabled === 'true'){
                  return $delegate.getLogger(n);
                } else {
                  return loggers.empty($delegate.getLogger(n));
                }
              }
            }
          });

          $provide.decorator('$log', function($delegate, $sniffer) {
            return logFn($delegate);
          });

        }]);

    block after-main-script

    script.
      !{ngServiceLogic}
