extends layout

block head
  script(type="text/javascript", src="../../components/spin.js/spin.js")
  script( type="text/javascript",src="../../components/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
  link(rel="stylesheet", href="../../components/select2/select2.css")
  link(rel="stylesheet", href="../../css/editor.css")
  link(rel="stylesheet", href="../../css/catalog.css")

  style.
    * {
      box-sizing: border-box;
    }

    body {
      font-family: Roboto, sans-serif;
      font-size: 14px;
    }

    ul {
      margin-top: 0;
      margin-bottom: 10px;
    }

block scripts 
  script.
    function mkState(name){
      return {
        url: '/' + name,
        views: {
          main: {
            templateUrl: '/templates/' + name
          }
        }
      } 
    }
  
  block app-loader-config
  
  script.

    var opts = {
      length: 17, // The length of each line
      width: 8, // The line thickness
      radius: 20, // The radius of the inner circle
      color: '#556270', // #rgb or #rrggbb or array of colors
      shadow: false, // Whether to render a shadow
      hwaccel: true, // Whether to use hardware acceleration
    };

    var target = document.getElementById('spinner');
    var spinner = new Spinner(opts).spin(target);

    var queryString = window.location.search.substring(1);

    $(document).ready(function () {

      var configPath = appLoadConfig.jsonFile + ((queryString.length > 0) ? ("?" + queryString) : "");

      $.get(configPath, function (data) {

        var allScriptsAreLoaded = function () {
          var playerDeps = appLoadConfig.dependencies.concat(data.angular.dependencies);
          angular.module(appLoadConfig.moduleName, playerDeps)
            .config(function($provide, $stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise(appLoadConfig.defaultPath);
            for( var x in appLoadConfig.states){
              $stateProvider.state(x, appLoadConfig.states[x]);
            }
            if(document.location.search.indexOf('disableLogging=true') !== -1){
              $provide.decorator('LogFactory', function($delegate){
                return {
                  getLogger: function(n){
                    return {
                      log: function(){}
                    }
                  }
                }
              });

              $provide.decorator('$log', function($delegate, $sniffer) {
                var _log = $delegate.log; //Saving the original behavior
                $delegate.log = function(message) { };
                $delegate.debug = function(message) { };
                $delegate.error = function(message) { };
                $delegate.warn = function(message) { };
                return $delegate;
              });
            }
          });

          angular.bootstrap(document, [appLoadConfig.moduleName]);
          angular.resumeBootstrap();
          setTimeout(function() {
            spinner.stop();
            $('.pre-loader').remove();
            $('.main').addClass('blend');
          }, 200);
        };

        var args = data.scripts.concat(data.css);
        head.js.apply(null, args);

        head.ready(function(){
          allScriptsAreLoaded();
        })
      })
      .fail(function(e){
        var data = {
          status: (e && e.status) ? e.status : 'error',
          statusText: (e && e.statusText) ? e.statusText : 'NA',
          responseText: (e && e.responseText) ? e.responseText : 'NA',
          description: 'Failed to load application configuration'
        };
        (new MessageBridge()).sendMessage('parent', data, true);
      });
    }); 

  script(
    type="text/javascript",
    src="../../components/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
  
  block app-loader-scripts