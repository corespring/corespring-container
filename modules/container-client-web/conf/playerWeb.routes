# Note: The order is important - there are some asset calls that we want to intercept before they hit the *file

#TODO: add this import to routesImport - but only once we have a local build file for the module - don't add it at root
#import org.corespring.container.client.controllers._

GET        /session/everything/:id.json            @org.corespring.container.client.controllers.resources.Session.loadEverything(id:String)
PUT        /session/submit-answers/:id.json        @org.corespring.container.client.controllers.resources.Session.submitAnswers(id:String)

GET        /item/:itemId.json                      @org.corespring.container.client.controllers.resources.Item.load(itemId:String)
PUT        /item/:itemId.json                      @org.corespring.container.client.controllers.resources.Item.save(itemId:String)

# Hooks for the player: config, services + components
GET        /:sessionId/config.json                 @org.corespring.container.client.controllers.hooks.PlayerHooks.config(sessionId:String)
GET        /:sessionId/player-services.js          @org.corespring.container.client.controllers.hooks.PlayerHooks.services(sessionId:String)
GET        /:sessionId/player-components.js        @org.corespring.container.client.controllers.hooks.PlayerHooks.components(sessionId:String)

# Hooks for the editor: config, services + components
GET        /:itemId/editor-config.json             @org.corespring.container.client.controllers.hooks.EditorHooks.config(itemId:String)
GET        /:itemId/editor-services.js             @org.corespring.container.client.controllers.hooks.EditorHooks.services(itemId:String)
GET        /:itemId/editor-components.js           @org.corespring.container.client.controllers.hooks.EditorHooks.components(itemId:String)

# Otherwise just serve up the client assets
GET        /:id/*file                              org.corespring.container.client.controllers.Assets.at(id:String, path="/container-client", file)

