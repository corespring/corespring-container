# Note: The order is important - there are some asset calls that we want to intercept before they hit the *file

GET        /player.js                                      @org.corespring.container.client.controllers.PlayerLauncher.playerJs


GET        /js/*file                                       controllers.Assets.at(path="/container-client/js", file)
GET        /css/*file                                      controllers.Assets.at(path="/container-client/css", file)
GET        /images/*file                                   controllers.Assets.at(path="/container-client/images", file)
GET        /components/*file                               controllers.Assets.at(path="/container-client/bower_components", file)
GET        /libs/:orgName/:componentName/*file             @org.corespring.container.client.controllers.ComponentsFileController.at(orgName, componentName, file)

GET        /session/:sessionId/player                      @org.corespring.container.client.controllers.Assets.session(sessionId:String, file = "player.html")
GET        /session/everything/:id.json                    @org.corespring.container.client.controllers.resources.Session.loadEverything(id:String)
PUT        /session/submit-answers/:id.json                @org.corespring.container.client.controllers.resources.Session.submitSession(id:String)
PUT        /session/save/:id.json                          @org.corespring.container.client.controllers.resources.Session.saveSession(id:String)
PUT        /session/complete/:id.json                      @org.corespring.container.client.controllers.resources.Session.completeSession(id:String)
PUT        /session/load-outcome/:id.json                  @org.corespring.container.client.controllers.resources.Session.loadOutcome(id:String)
        
        
PUT        /item/score/:id.json                            @org.corespring.container.client.controllers.resources.Item.getScore(id:String)
GET        /item/:itemId.json                              @org.corespring.container.client.controllers.resources.Item.load(itemId:String)
PUT        /item/:itemId.json                              @org.corespring.container.client.controllers.resources.Item.save(itemId:String)
        
GET        /item/:itemId/player                            @org.corespring.container.client.controllers.hooks.PlayerHooks.createSessionForItem(itemId:String)
        
GET        /icon/:icon                                     @org.corespring.container.client.controllers.Icons.icon(icon)
        
GET        /rig/:orgName/:compName/index.html              @org.corespring.container.client.controllers.Rig.index(orgName:String, compName:String, data: Option[String] ?= None)
GET        /rig/:orgName/:compName/config.json             @org.corespring.container.client.controllers.Rig.config(orgName:String, compName:String)
GET        /rig/:orgName/:compName/:dataName.json          @org.corespring.container.client.controllers.Rig.data(orgName:String, compName:String, dataName:String)
GET        /rig/:orgName/:compName/components.js           @org.corespring.container.client.controllers.Rig.componentsJs(orgName, compName)
GET        /rig/:orgName/:compName/components.css          @org.corespring.container.client.controllers.Rig.componentsCss(orgName, compName)
GET        /rig/:orgName/:compName/*file                   @org.corespring.container.client.controllers.Rig.asset(orgName, compName, file)

# Hooks for the player: config, services + components
GET        /player/:sessionId/index.html                   @org.corespring.container.client.controllers.Assets.session(sessionId, file = "player.html")
GET        /player/:sessionId/player-:resource.:suffix     @org.corespring.container.client.controllers.hooks.PlayerHooks.resource(resource:String, suffix:String, sessionId:String)
GET        /player/:sessionId/*file                        @org.corespring.container.client.controllers.Assets.session(sessionId:String, file)

# Hooks for the editor: config, services + components
GET        /editor/create-item                             @org.corespring.container.client.controllers.hooks.EditorHooks.createItem
GET        /editor/:itemId/index.html                      @org.corespring.container.client.controllers.Assets.item(itemId:String, file = "editor.html")
GET        /editor/:itemId/editor-:resource.:suffix        @org.corespring.container.client.controllers.hooks.EditorHooks.resource(resource:String, suffix:String,itemId:String)
GET        /editor/:itemId/*file                           @org.corespring.container.client.controllers.Assets.item(itemId:String, file)
POST       /editor/:itemId/*file                           @org.corespring.container.client.controllers.Assets.upload(itemId, file)

