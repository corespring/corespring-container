# Note: The order is important - there are some asset calls that we want to intercept before they hit the *file

GET           /player.js                                               @org.corespring.container.client.controllers.PlayerLauncher.playerJs
GET           /editor.js                                               @org.corespring.container.client.controllers.PlayerLauncher.editorJs
GET           /catalog.js                                              @org.corespring.container.client.controllers.PlayerLauncher.catalogJs

GET           /js/*file                                              controllers.Assets.at(path="/container-client/js", file)
GET           /css/*file                                             controllers.Assets.at(path="/container-client/css", file)
GET           /images/*file                                          controllers.Assets.at(path="/container-client/images", file)
GET           /components/*file                                      controllers.Assets.at(path="/container-client/bower_components", file)
GET           /public/:orgName/:componentName/*file                  @org.corespring.container.client.controllers.ComponentsFileController.at(orgName, componentName, file)

# Component sets js/css
GET           /component-sets/:context/:directive.:suffix            @org.corespring.container.client.controllers.ComponentSets.resource(context, directive, suffix)
# Component single js/css
GET           /component-single/:context/:componentType.:suffix      @org.corespring.container.client.controllers.ComponentSets.singleResource(context, componentType, suffix)

# Hooks for the player: config,  components

GET           /player/session/:sessionId/index.html                  @org.corespring.container.client.controllers.apps.Player.load(sessionId:String)
GET           /player/item/:itemId/index.html                        @org.corespring.container.client.controllers.apps.Player.createSessionForItem(itemId:String)
GET           /player/session/:sessionId/*file                       @org.corespring.container.client.controllers.Assets.session(sessionId, file)

# Session
GET           /session/item-and-session/:id.json                     @org.corespring.container.client.controllers.resources.Session.loadItemAndSession(id)
GET           /session/reopen/:id.json                               @org.corespring.container.client.controllers.resources.Session.reopenSession(id)
GET           /session/reset/:id.json                                @org.corespring.container.client.controllers.resources.Session.resetSession(id)
PUT           /session/save/:id.json                                 @org.corespring.container.client.controllers.resources.Session.saveSession(id)
PUT           /session/complete/:id.json                             @org.corespring.container.client.controllers.resources.Session.completeSession(id)
PUT           /session/load-outcome/:id.json                         @org.corespring.container.client.controllers.resources.Session.loadOutcome(id)
PUT           /session/:id/score.json                                @org.corespring.container.client.controllers.resources.Session.getScore(id)

# Item
GET           /item/:itemId.json                                     @org.corespring.container.client.controllers.resources.Item.load(itemId)
POST          /item/create                                           @org.corespring.container.client.controllers.resources.Item.create()

# ItemDraft
GET           /draft/:draftId.json                                   @org.corespring.container.client.controllers.resources.ItemDraft.load(draftId)
GET           /draft/:draftId/:name/*file                            @org.corespring.container.client.controllers.Assets.supportingMaterial(draftId, name, file)
GET           /draft/:draftId/*file                                  @org.corespring.container.client.controllers.Assets.item(draftId, file)
PUT           /draft/update/:subset/:draftId.json                    @org.corespring.container.client.controllers.resources.ItemDraft.saveSubset(draftId, subset)
POST          /draft/:itemId/create                                  @org.corespring.container.client.controllers.resources.ItemDraft.create(itemId)

GET           /icon/:icon                                            @org.corespring.container.client.controllers.Icons.icon(icon)

# Rig
GET          /rig/:componentType/index.html                         @org.corespring.container.client.controllers.apps.Rig.load(componentType)
GET          /rig/:componentType/*file                              @org.corespring.container.client.controllers.apps.Rig.asset(componentType, file)

# Catalog
GET           /catalog/:itemId/index.html                           @org.corespring.container.client.controllers.apps.Catalog.load(itemId)
GET           /catalog/:itemId/*file                                @org.corespring.container.client.controllers.Assets.item(itemId, file)

# Editor: config, components
GET           /editor/:draftId/index.html                            @org.corespring.container.client.controllers.apps.Editor.load(draftId)
GET           /editor/:draftId/supporting-material/:name/*file       @org.corespring.container.client.controllers.Assets.supportingMaterial(draftId, name, file)
GET           /editor/:draftId/*file                                 @org.corespring.container.client.controllers.Assets.item(draftId, file)
POST          /editor/:draftId/*file                                 @org.corespring.container.client.controllers.Assets.upload(draftId, file)
DELETE        /editor/:draftId/*file                                 @org.corespring.container.client.controllers.Assets.delete(draftId, file)
GET           /dev-editor/:draftId/index.html                        @org.corespring.container.client.controllers.apps.DevEditor.load(draftId)

GET           /data-query/:topic                                    @org.corespring.container.client.controllers.DataQuery.list(topic, query : Option[String] ?= None)
GET           /data-query/:topic/:id                                @org.corespring.container.client.controllers.DataQuery.findOne(topic, id)
