@(namespace: String, load: Call, saveSubset: Call, save: Option[Call], createSupportingMaterial: Call, createSupportingMaterialFromFile:Call, componentSet: JsValue, widgets: JsValue)

@toMethodAndUrl(c:Call) = @{
  s"{ method: '${c.method.toLowerCase}', url: '${c.url}'}"  
}

(function(){
  "use strict";

  angular.module('@namespace', []);

  angular.module('@namespace').factory('ItemUrls', [ function($http){
    return {
      load: @toMethodAndUrl(load),
      @save.map { save =>
        save: @toMethodAndUrl(save),
      }
      saveSubset: @toMethodAndUrl(saveSubset),
      createSupportingMaterial: @toMethodAndUrl(createSupportingMaterial),
      createSupportingMaterialFromFile: @toMethodAndUrl(createSupportingMaterialFromFile)
    }
  }]);

  angular.module('@namespace').factory('ComponentService', [function(){
    return {
        loadAvailableComponents: function(onSuccess, onFailure){
          var components = @{Json.stringify(componentSet)};
          onSuccess(components);
        }
    };
  }]);

  angular.module('@namespace').factory('DesignerService', ['$http', function($http){
    return {
      loadAvailableUiComponents: function(onSuccess, onFailure){
        var interactions = @{Json.stringify(componentSet)};
        var widgets = @{Json.stringify(widgets)};
        onSuccess({ interactions: interactions, widgets: widgets });
      }
    };
  }]);

})(this);