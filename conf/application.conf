logger.level=WARN
logger.global=INFO
logger.editor=TRACE
logger.root=INFO
logger.org.corespring.container.client.filters=TRACE
//logger.org.corespring.container=DEBUG
//logger.org.corespring.container.AssetUtils=TRACE
//logger.org.corespring.container.player=TRACE
//logger.org.corespring.container.PlayerLauncher=DEBUG
//logger.org.corespring.container.client.controllers.apps.Editor=TRACE
//logger.com.ahum.deps=INFO
//logger.com.amazonaws=INFO
//logger.com.amazonaws.services.s3.AmazonS3Client=DEBUG
//logger.s3-play-plugin=TRACE
//logger.shell.home=INFO
//logger.components.loader=INFO
//logger.org.corespring.shell.controllers.editor.ItemDraftHooks=TRACE

application.global=org.corespring.shell.Global

components.path="corespring-components/components"
components.path=${?CONTAINER_COMPONENTS_PATH}
components.showNonReleasedComponents=${?ENV_SHOW_NON_RELEASED_COMPONENTS}
components.filter.enabled=true
# Optional minification/gzip for components sets -
# If not specified the app mode will decide: Prod = true, Dev = false
# components.minify=true
# componets.gzip=true

mongo.db="mongodb://localhost/corespring-container"
mongo.db=${?CONTAINER_MONGO_URI}

application.secret="this-is-just-a-developer-app-so-heres-a-secret"

# Testing of a cdn.
# If present the domain will be used to serve prod player assets.
# There is no fallback checking or anything like that - it's just a straight swap of domain.
# Make sure that the CDN fetches its resources from this app.
cdn{
  domain: ${?CONTAINER_CDN_DOMAIN}
}

amazon {
  s3 {
    key = "xxxxxxxxxxxxxxxxxxxxx"
    key = ${?CONTAINER_S3_KEY}
    secret = "xxxxxxxxxxxxxxxxxxxxxx"
    secret = ${?CONTAINER_S3_SECRET}
    bucket = "corespring-container-test-bucket"
    fake-endpoint=${?CONTAINER_FAKE_S3_ENDPOINT}
  }
}

editor {
  autosave: {
    ### how long to debounce before triggering a save
    debounceInMillis: 5000
    debounceInMillis: ${?EDITOR_DEBOUNCE_IN_MILLIS}
  }
}

# Configure Akka Execution Contexts
akka {
  loglevel = "WARNING"
  loglevel = ${?AKKA_LOG_LEVEL}
  stdout-loglevel = "WARNING"
  stdout-loglevel = ${?AKKA_LOG_LEVEL}
  throughput = 100
  throughput = ${?AKKA_THROUGHPUT}
  actor {
    default-dispatcher = {
      executor = "fork-join-executor"
      type = Dispatcher
      fork-join-executor {
        parallelism-min = ${?AKKA_ITEM_SESSION_API_PARALLELISM_MIN}
        parallelism-max = ${?AKKA_ITEM_SESSION_API_PARALLELISM_MAX}
      }
    }
    item-session-api {
      executor = "fork-join-executor"
      type = Dispatcher
      fork-join-executor {
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 4.0
        parallelism-factor = ${?AKKA_ITEM_SESSION_API_PARALLELISM_FACTOR}
        parallelism-min = 200
        parallelism-min = ${?AKKA_ITEM_SESSION_API_PARALLELISM_MIN}
        parallelism-max = 200
        parallelism-max = ${?AKKA_ITEM_SESSION_API_PARALLELISM_MAX}
      }
    }
  }
}